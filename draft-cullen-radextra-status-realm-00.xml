<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
	  <!ENTITY rfc2119 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'>
	  <!ENTITY rfc2865 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2865.xml'>
	  <!ENTITY rfc5997 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5997.xml'>
	  <!ENTITY rfc7749 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7749.xml'>
	  <!ENTITY rfc4668 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4668.xml'>
	  <!ENTITY rfc4669 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4669.xml'>
	  <!ENTITY rfc4670 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4670.xml'>
	  <!ENTITY rfc4671 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4671.xml'>
	  <!ENTITY rfc3579 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3579.xml'>
	  <!ENTITY rfc4270 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4270.xml'>
	  <!ENTITY rfc1321 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1321.xml'>
	  <!ENTITY rfc5080 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5080.xml'>
	  <!ENTITY rfc3579 PUBLIC '' 'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3579.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" consensus="true" ipr="trust200902" docName="draft-cullen-radextra-status-realm-00">
  <front>
    <title abbrev="Status-Realm Requests for RADIUS">
      Status-Realm Requests for the Remote Authentication Dial-In User Service (RADIUS)
    </title>

    <author initials="M." surname="Cullen" fullname="Margaret Cullen">
      <organization>Painless Security</organization>
      <address>
        <postal>
          <street>4 High St., Suite 134</street>
          <city>North Andover</city> <region>MA</region>
          <code>01845</code>
          <country>USA</country>
        </postal>
        <phone>+1 (781)405-7464</phone>
        <email>margaret@painless-security.com</email>
        <uri>http://www.painless-security.com</uri>
      </address>
    </author>

    <date day="19" month="October" year="2022"/>

    <area>SEC</area>

    <workgroup>radextra BOF</workgroup>

    <abstract>
      <t>
	This document describes an extension to the Remote
	Authentication Dial In User Service (RADIUS) protocol,
	enabling clients to query the status of a RADIUS Identity
	Provider (IDP) realm across a fabric of RADIUS proxies.  This
	extension defines the Status-Realm RADIUS Packet Type Code
	(TBD).
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
	This document describes an extension to the Remote
	Authentication Dial-In User Service (RADIUS) protocol <xref
	target="RFC2865"/>, enabling clients to query the status of a
	RADIUS Identity Provider (IDP) realm across a fabric of RADIUS
	proxies.  This extension defines the Status-Realm RADIUS
	Packet Type Code (TBD).
      </t>
      <t>
	Status-Realm is similar to the existing Status-Realm Packet
	Type Code <xref target="RFC5997"/>, except that it is
	forwarded by RADIUS proxies.  Forwarding Status-Realm requests
	enables checking the status of an IDP realm across one or more
	RADIUS proxies.
      </t>
    </section>

    <section title="Requirements Notation">
      <t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
	NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
	"OPTIONAL" in this document are to be interpreted as described
	in <xref target="RFC2119"/>.
      </t>
    </section>

    <section title="Overview">
      <t>
	Status-Realm packets are sent by a RADIUS client to a
	RADIUS server in order to query the reachability and status of
	a particular RADIUS IDP realm.  In some cases, the
	Status-Realm client may be able to reach an IDP Server for the
	realm directly.  In other cases, the Status-Realm Client will
	send the initial Status-Realm request to a RADIUS proxy, which
	will forward the Status-Realm request toward the indicated
	realm.
      </t>
      <t>
	A Status-Realm packet MUST include a Message-Authenticator
	attribute to provider per-packet authentication and integrity
	protection.
      </t>
      <t>
	When a Status-Realm packet is received by an IDP Server for
	the indicated realm, the IDP Server will respond with an
	Access-Accept packet, indicating the status of the IDP Realm.
      </t>
      <t>
	If an intermediate RADIUS proxy is unable to forward a
	Status-Realm packet towards an IDP Server, either because it
	has no information about how to reach the indicated realm, or
	because there are no reachable servers for that realm, the
	RADIUS proxy SHOULD return an Access-Reject packet in response
	to a Status-Realm request received on the authentication port,
	or a negative Accounting-Response packet in response to a
	Status-Realm request receceived on the accounting port.
      </t>
      <t>
	Status-Realm packets allow the sender to determine the
	reachability and status of an IDP realm, without requiring a
	direct RADIUS connection to a RADIUS Server for the realm, and
	without requiring credentials for an authorized user within
	the realm.  This can be useful for debugging RADIUS
	authentication issues or monitoring IDP realm availability.
      </t>	  
    </section>
    <section title="Packet Formats">
      <t>
	Status-Realm requests are sent in a single format, whether
	they are sent to the authentication port or the accounting
	port.  However, the response packets vary, depending on the
	port to which the request is sent.  When sent to an
	authentication port, the response to a Status-Realm request
	is an Access-Accept packet or an Access-Reject packet.  When
	sent to an accounting port, the response to a Status-Realm
	query is an Accounting-Response packet.
      </t>
      <t>
	This section describes the RADIUS packet formats for
	Status-Realm requests.  It also notes specific requirements
	for the Access-Accept and Accounting-Response packets sent in
	response to Status-Realm requests.
      </t>
      <t>
	Examples of Status-Realm packet flows are given below in
	Section [reference needed].
      </t>
	  
      <section title="Status-Realm Request Packet">
	<t>
	  Status-Realm request packets reuse the RADIUS packet format,
	  with the fields and values for those fields as defined in
	  <xref target="RFC2865"/>, Section 3.  All of the text and
	  diagrams of that section are not included here, only the
	  differences required to implement Status-Realm requests.
	</t>
	<t>
	  The Authenticator field of Status-Realm packets MUST be
	  generated using the same method as that used for the Request
	  Authenticator field of Access-Request packets, as given
	  below.
	</t>
	<t>
	  The role of the Identifier field is the same for
	  Status-Realm as it is for other packets.  However, as
	  Status-Realm is taking the role of Access-Request or
	  Accounting-Request packets, there is the potential for
	  Status-Realm requests to be in conflict with Access-Request
	  or Accounting-Request packets with the same Identifier.  In
	  Section [add reference] below, we describe a method for
	  avoiding these problems.  This method MUST be used to avoid
	  conflicts between Status-Realm and other packet types.
	</t>
	<t>
	  In addition to the above requirements, all Status-Realm
	  packets MUST include a Message-Authenticator attribute.
	  Failure to do so would mean that the packets could be
	  trivially spoofed.
	</t>
	<t>
	  Status-Realm packets MAY include NAS-Identifier, and one of
	  NAS-IP-Address or NAS-IPv6-Address.  These attributes are
	  not necessary for the operation of Status-Realm, but may be
	  useful information to a server that receives those packets.
	</t>
	<t>
	  User authentication credentials such as User-Name,
	  User-Password, CHAP-Password, EAP-Message MUST NOT appear in
	  a Status-Realm packet sent to a RADIUS authentication port.
	  User or NAS accounting attributes such as Acct-Session-Id,
	  Acct-Status-Type, Acct-Input-Octets MUST NOT appear in a
	  Status-Realm packet sent to a RADIUS accounting port.
	</t>
	<section title="Request Authenticator">
	  <t>
            In Status-Realm packets, the Authenticator value is a
            16-octet random number called the Request Authenticator.
            The value SHOULD be unpredictable and unique over the
            lifetime of a secret (the password shared between the
            client and the RADIUS server), since repetition of a
            request value in conjunction with the same secret would
            permit an attacker to reply with a previously intercepted
            response.  Since it is expected that the same secret MAY
            be used to authenticate with servers in disparate
            geographic regions, the Request Authenticator field SHOULD
            exhibit global and temporal uniqueness.  See [RFC4086] for
            suggestions as to how random numbers may be generated.
            [Does this need any updates to cover other security
            encapsulations for RADIUS that may not use a secret?]
	  </t>
	  <t>
            The Request Authenticator value in a Status-Realm packet
            SHOULD also be unpredictable, lest an attacker trick a
            server into responding to a predicted future request, and
            then use the response to masquerade as that server to a
            future Status-Realm request from a client.
	  </t>
	</section>
      </section>
      
      <section title="Responses to Status-Realm">
	<t>
	  Similarly, the Response Authenticator field of an
	  Access-Accept or Access-Reject packet sent in response to a
	  Status-Realm request MUST be generated using the same method
	  as used for calculating the Response Authenticator of an
	  Access-Accept or an Access-Reject sent in response to an
	  Access-Request, with the Status-Realm Request Authenticator
	  taking the place of the Access-Request Request
	  Authenticator.
	</t>
	<t>
	  The Response Authenticator field of an Accounting-Response
	  packet sent in response to Status-Realm queries MUST be
	  generated using the same method as used for calculating the
	  Response Authenticator of the Accounting-Response sent in
	  response to an Accounting-Request, with the Status-Realm
	  Request Authenticator taking the place of the
	  Accounting-Request Request Authenticator.
	</t>
	<t>
	  The Access-Accept MAY contain a Reply-Message or Message-
	  Authenticator attribute.  It SHOULD NOT contain other
	  attributes.  The Accounting-Response packets sent in
	  response to a Status-Realm query SHOULD NOT contain any
	  attributes.  
	</t>
	<t>
	  Note that when a server responds to a Status-Realm request,
	  it MUST NOT send more than one Response packet.
	</t>
	
	<section title="Response Authenticator">
	  <t>
            The value of the Authenticator field in Access-Accept or
            Accounting-Response packets is called the Response
            Authenticator, and contains a one-way MD5 hash calculated
            over a stream of octets consisting of: the RADIUS packet,
            beginning with the Code field, including the Identifier,
            the Length, the Request Authenticator field from the
            Status-Realm packet, and the response Attributes (if
            any), followed by the shared secret.  That is,

	    [formatting]
            ResponseAuth =
            MD5(Code+ID+Length+RequestAuth+Attributes+Secret)

            where + denotes concatenation.
	  </t>
	</section>
      </section>
    </section>
    
    <section title="Implementation Notes">
      <t>
	This section describes implementation details and requirements
	for RADIUS clients and servers that support Status-Realm.
      </t>
      <t>
	[formatting]

	The following text applies to the authentication
	and accounting ports.  We use the generic terms below to
	simplify the discussion:

      * Request packet

      A Status-Realm packet sent to an authentication port or an
      accounting port.

      * Response packet

      An Access-Accept or Access-Reject packet sent from an
      authentication port or an Accounting-Response packet sent from
      an accounting port.
      </t>
      <t>
	We also refer to a "client" as the originator of the
	Status-Realm packet, and a "server" as the receiver of that
	packet and the originator of the Response packet.
      </t>
      <t>
	Using generic terms to describe the Status-Realm
	conversations is simpler than duplicating the text for
	authentication and accounting packets.
      </t>
      
      <section title="Client Requirements">
	<t>
	  Clients SHOULD permit administrators to globally enable or
	  disable the generation of Status-Ream packets.  The default
	  SHOULD be that sending Satus-Realm packets is disabled.  It
	  is undesirable to send Status-Realm requests to servers that
	  do not support Status-Realm, clients SHOULD also have a
	  per-server configuration indicating whether or not to enable
	  Status-Realm for a particular destination.  The default
	  SHOULD be that it is disabled.
	</t>
	<t>
	  When Status-Realm packets are sent from a client, they MUST
	  NOT be retransmitted.  Instead, the Identity field MUST be
	  changed every time a packet is transmitted.  The old packet
	  should be discarded, and a new Status-Realm packet should be
	  generated and sent, with new Identity and Authenticator
	  fields.
	</t>
	<t>
	  Clients MUST include the Message-Authenticator attribute in
	  all Status-Realm packets.  Failure to do so would mean that
	  the packets could be trivially spoofed, leading to potential
	  denial-of-service (DoS) attacks.  Other attributes SHOULD
	  NOT appear in a Status-Realm packet, except as outlined
	  below in Section 5.
	</t>
	<t>
	  The client MAY increment packet counters as a result of
	  sending a Status-Realm request or of receiving a Response
	  packet.  The client MUST NOT perform any other action that
	  is normally performed when it receives a Response packet,
	  such as permitting a user to have login access to a port.
	</t>
	<t>
	  Clients MAY send Status-Realm requests to the RADIUS
	  destination ports from the same source port used to send
	  normal Request packets.  Other clients MAY choose to send
	  Status-Realm requests from a unique source port that is not
	  used to send Request packets. Using a unique source port for
	  Status-Realm requests aids in matching responses to
	  requests.  Since the response to a Status-Realm packet is
	  an Access-Accept or Accounting-Response packet, those
	  responses are indistinguishable from other packets sent in
	  response to a Request packet.  Therefore, the best way to
	  distinguish them from other traffic is to have a unique
	  port.
	</t>
	<t>
	  In the case where a client sends a Status-Realm request from
	  a source port also used to send other Request packets, the
	  Identifier field MUST be unique across all outstanding
	  Request packets for that source port, independent of the
	  value of the RADIUS Code field for those outstanding
	  requests.  Once the client has either received a response to
	  the Status-Realm packet or determined that the Status-Realm
	  packet has timed out, it may reuse that Identifier in
	  another packet.
	</t>
	<t>
	  Robust implementations SHOULD accept any Response packet as
	  a valid response to a Status-Realm packet, subject to the
	  validation requirements defined above for the Response
	  Authenticator.  The client MUST validate the Response
	  Authenticator via the algorithm given above in Section 3.
	  If the Response Authenticator is not valid, the packet MUST
	  be silently discarded.  If the Response Authenticator is
	  valid, then the packet MUST be deemed to be a valid response
	  from the server.
	</t>
      </section>
      
      <section title="Server Requirements">
	<t>
	  Servers SHOULD permit administrators to globally enable or
	  disable the acceptance of Status-Realm packets.  The default
	  SHOULD be that acceptance is enabled.  Servers SHOULD also
	  permit administrators to enable or disable acceptance of
	  Status-Realm packets on a per-client basis.  The default
	  SHOULD be that acceptance is enabled.
	</t>
	<t>
	  Status-Realm packets originating from clients that are not
	  permitted to send the server Request packets MUST be
	  silently discarded.  If a server does not support
	  Status-Realm packets, or is configured not to respond to
	  them, then it MUST silently discard the packet.
	</t>
	<t>
	  We note that [RFC2865], Section 3, defines a number of
	  RADIUS Codes, but does not make statements about which Codes
	  are valid for port 1812.  In contrast, [RFC2866], Section 3,
	  specifies that only RADIUS Accounting packets are to be sent
	  to port 1813.  This specification is compatible with
	  [RFC2865], as it uses a known Code for packets to port 1812.
	  This specification is not compatible with [RFC2866], as it
	  adds a new Code (Status-Realm) that is valid for port 1812.
	  However, as the category of [RFC2866] is Informational, this
	  conflict is acceptable.
	</t>
	<t>
	  If a server supports Status-Realm packets, and is configured
	  to respond to them, and receives a packet from a known
	  client, it MUST validate the Message-Authenticator attribute
	  as defined in <xref target="RFC3579"/>, Section 3.2.  Packets failing that
	  validation MUST be silently discarded.
	</t>
	<t>
	  Servers SHOULD NOT otherwise discard Status-Realm packets if
	  they have recently sent the client a Response packet.  The
	  query may have originated from an administrator who does not
	  have access to the Response packet stream or one who is
	  interested in obtaining additional information about the
	  server.
	</t>
	<t>
	  The server MAY prioritize the handling of Status-Realm
	  packets over the handling of other requests, subject to the
	  rate limiting described above.
	</t>
	<t>
	  The server MAY decide not to respond to a Status-Realm
	  requests, depending on local-site policy.  For example, a
	  server that is running but is unable to perform its normal
	  activities MAY silently discard Status- Realm packets.  This
	  situation can happen, for example, when a server requires
	  access to a database for normal operation, but the
	  connection to that database is down.  Or, it may happen when
	  the accepted load on the server is lower than the offered
	  load.
	</t>
	<t>
	  Some server implementations require that Access-Request
	  packets be accepted only on "authentication" ports (e.g.,
	  1812/udp), and that Accounting-Request packets be accepted
	  only on "accounting" ports (e.g., 1813/udp).  Those
	  implementations SHOULD reply to Status- Realm packets sent
	  to an "authentication" port with an Access-Accept packet and
	  SHOULD reply to Status-Realm packets sent to an "accounting"
	  port with an Accounting-Response packet.  Some server
	  implementations accept both Access-Request and
	  Accounting-Request packets on the same port, and they do not
	  distinguish between "authentication only" ports and
	  "accounting only" ports.  Those implementations SHOULD reply
	  to Status-Realm packets with an Access-Accept packet.
	</t>
	<t>
	  The server MAY increment packet counters as a result of
	  receiving a Status-Realm packet or sending a Response
	  packet.  The server SHOULD NOT perform any other action that
	  is normally performed when it receives a Request packet,
	  other than sending a Response packet.
	</t>
      </section>
      
      <section title="Proxy Server Requirements">
	<t>
	  Many RADIUS servers act as RADIUS proxies, forward requests
	  to other RADIUS servers.  Such servers SHOULD proxy
	  Status-Realm packets to enable clients to determine the
	  status of IDP Realms that are not directly connected.  The
	  Status-Realm request should be proxied to the same next-hop
	  that the RADIUS proxy would use for a Request packet.
	</t>
	<t>
	  In some cases, a proxy RADIUS server may not have an
	  available next-hop RADIUS server for the realm included in
	  the Status-Realm request.  In that case, a RADIUS proxy
	  SHOULD send an error response (an Access-Reject, or a
	  negatively Accounting-Response).
	</t>
	<t>
	  Proxy servers SHOULD be configured to respond to
	  Status-Realm queries from clients, and they MAY act as
	  clients sending Status-Realm queries to other servers.
	  However, those activities MUST be independent of one
	  another.
	</t>
      </section>
    </section>
    
    <section title="Management Information Base (MIB) Considerations">
      <t>
	Status-Realm packets are sent to the defined RADIUS
	ports, so they can affect the <xref target="RFC4669"/> and <xref
	target="RFC4671"/> RADIUS server MIB modules.  <xref
	target="RFC4669"/> defines a counter named
	radiusAuthServTotalUnknownTypes that counts "The number of
	RADIUS packets of unknown type that were received".  <xref
	target="RFC4671"/> defines a similar counter named
	radiusAccServTotalUnknownTypes.  Implementations not
	supporting Status-Realm or implementations that are
	configured not to respond to Status-Realm packets MUST use
	these counters to track received Status-Realm packets.
      </t>
      <t>
	If, however, Status-Realm is supported and the server is
	configured to respond as described above, then the counters
	defined in <xref target="RFC4669"/> and <xref
	target="RFC4671"/> MUST NOT be used to track Status-Realm
	requests or responses to those requests.  That is, when a
	server fully implements Status-Realm, the counters defined in
	<xref target="RFC4669"/> and <xref target="RFC4671"/> MUST be
	unaffected by the transmission or reception of packets
	relating to Status-Realm.
      </t>
      <t>
	If a server supports Status-Realm and the <xref
	target="RFC4669"/> or <xref target="RFC4671"/> MIB modules,
	then it SHOULD also support vendor-specific MIB extensions
	dedicated solely to tracking Status-Realm requests and
	responses.  Any definition of the server MIB modules for
	Status-Realm is outside of the scope of this document.
      </t>
    </section>

    <section title="Interaction with RADIUS Client MIB Modules">
      <t>
	Clients implementing Status-Realm MUST NOT increment <xref
	target="RFC4668"/> or <xref target="RFC4670"/> counters upon
	reception of Response packets to Status- Realm queries.  That
	is, when a server fully implements Status- Realm, the counters
	defined in <xref target="RFC4668"/> and <xref
	target="RFC4670"/> MUST be unaffected by the transmission or
	reception of packets relating to Status-Realm.
      </t>
      <t>
	If an implementation supports Status-Realm and the <xref
	target="RFC4668"/> or <xref target="RFC4670"/> MIB modules,
	then it SHOULD also support vendor-specific MIB extensions
	dedicated solely to tracking Status-Realm requests and
	responses.  Any definition of the client MIB modules for
	Status- Realm is outside of the scope of this document.
      </t>
    </section>

    <section title="Table of Attributes">
      <t>
	The following table provides a guide to which attributes may
	be found in Status-Realm packets, and in what quantity.
	Attributes other than the ones listed below SHOULD NOT be
	found in a Status-Realm packet.
      </t>
      <t>
	[Formatting]
	
      Status-  Access-  Accounting-
      Server   Accept   Response      #      Attribute

      0        0        0             1      User-Name
      0        0        0             2      User-Password
      0        0        0             3      CHAP-Password
      0-1      0        0             4      NAS-IP-Address (Note 1)
      0        0+       0            18      Reply-Message
      0+       0+       0+           26      Vendor-Specific
      0-1      0        0            32      NAS-Identifier (Note 1)
      0        0        0            79      EAP-Message
      1        0-1      0-1          80      Message-Authenticator
      0-1      0        0            95      NAS-IPv6-Address (Note 1)
      0        0        0            103-121 Digest-*

      Note 1: A Status-Realm packet SHOULD contain one of
      (NAS-IP-Address or NAS-IPv6-Address), or NAS-Identifier, or both
      NAS-Identifier and one of (NAS-IP-Address or NAS-IPv6-Address).

   The following table defines the meaning of the above table entries.

   0     This attribute MUST NOT be present in packet.
   0+    Zero or more instances of this attribute MAY be present in
         packet.
   0-1   Zero or one instance of this attribute MAY be present in
         packet.
   1     Exactly one instance of this attribute MUST be present in
         packet.
      </t>
    </section>
    
    <section title="IANA Considerations">
      <t>
	This document defines the Status-Realm RADIUS Packet Type Code
	(TBD), which should be assigned by IANA from the Unassigned
	block of RADIUS Packet Type Codes.
      </t>
	<t>
	  Examples of Status-Realm packet flows are given below in
	  Section [add reference].
	</t>
    </section>

    <section title="Security Considerations">
      <t>
	This document defines the Status-Realm packet as similar
	in treatment to the Access-Request packet, and is therefore
	subject to the same security considerations as described in
	<xref target="RFC2865"/>, Section 8.  Status-Realm packets
	also use the Message-Authenticator attribute, and are
	therefore subject to the same security considerations as
	<xref target="RFC3579"/>, Section [reference].
      </t>
      <t>
	We reiterate that Status-Realm packets MUST contain a
	Message- Authenticator attribute.  Early implementations
	supporting Status- Server did not enforce this requirement,
	and were vulnerable to the following attacks:
      </t>
      <t>
	[Format]
      *  Servers not checking the Message-Authenticator attribute could
         respond to Status-Realm packets from an attacker, potentially
         enabling a reflected DoS attack onto a real client.
      </t>
      <t>
	[Format]
      *  Servers not checking the Message-Authenticator attribute could
         be subject to a race condition, where an attacker could see an
         Access-Request packet from a valid client and synthesize a
         Status-Realm packet containing the same Request Authenticator.
         If the attacker won the race against the valid client, the
         server could respond with an Access-Accept and potentially
         authorize unwanted service.
      </t>
      <t>
	The last attack is similar to a related attack when
	Access-Request packets contain a CHAP-Password but no
	Message-Authenticator.  We re-iterate the suggestion of <xref
	target="RFC5080"/>, Section 2.2.2, which proposes that all
	clients send a Message-Authenticator in every Access-Request
	packet, and that all servers have a configuration setting to
	require (or not) that a Message-Authenticator attribute be
	used in every Access-Request packet.
      </t>
      <t>
	Failure to include a Message-Authenticator attribute in a
	Status-Realm packet means that any RADIUS client or server may
	be vulnerable to the attacks outlined above.  For this reason,
	implementations of this specification MUST include the
	Message-Authenticator attribute in every Status-Realm request.
      </t>
      <t>
	Where this document differs from <xref target="RFC2865"/> is
	that it defines a new request/response method in RADIUS: the
	Status-Realm request. The Status-Realm is based on previously
	described and Status-Server message <xref target="RFC5997"/>,
	and no additional security considerations are known to relate
	to the implementation or use of Status-Server.  This option
	differs from Status-Server because it is forwarded through
	proxies, so it can be sent to an RADIUS IDP Server that does
	not have a direct connection to the Status-Realm client.
	However, Access-Request packets are also forwarded, and there
	should be no additional attacks opened by fowarding
	Status-Realm requests.
      </t>
      <t>
	Attacks on cryptographic hashes are well known <xref
	target="RFC4270"/> and getting better with time.  RADIUS uses
	the MD5 hash <xref target="RFC1321"/> for packet
	authentication and attribute obfuscation.  There are ongoing
	efforts in the IETF to analyze and address these issues for
	the RADIUS protocol.
      </t>
    </section>

    <section title="Acknowledgements">
      <t>
	This document was written using xml2rfc, as described in
	<xref target="RFC7749"/>
      </t>
      <t>
	Many of the sections in this document were adapted from the
	description of the Status-Server RADIUS Packet Type Code in
	<xref target="RFC5997"/>.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &rfc1321;
      &rfc2119;
      &rfc2865;
      &rfc5080;
    </references>
    
    <references title="Informative References">
      &rfc5997;
      &rfc7749;
      &rfc4668;
      &rfc4669;
      &rfc4670;
      &rfc4671;
      &rfc3579;
      &rfc4270;
    </references>
  </back>
</rfc>
